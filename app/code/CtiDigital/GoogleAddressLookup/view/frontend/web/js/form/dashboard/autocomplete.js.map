{"version":3,"sources":["frontend/web/js/form/dashboard/autocomplete.js"],"names":["define","$","loadListener","Initializer","Strategy","addressData","addressFieldsMap","valueExtractor","addressFinder","document","getElementById","country","form","addForm","val","addEventListener","event","el","target","options","selectedIndex","value","address","subscribe","$inputs","find","autocompleteField","index","id","getAttribute","map","each","isGoogleApiLoaded","isApiLoaded"],"mappings":";;AAAA;;;;AAIAA,OAAO,CACH,QADG,EAEH,2CAFG,EAGH,8CAHG,EAIH,mDAJG,EAKH,+CALG,EAMH,oDANG,EAOH,kDAPG,CAAP,EAQG,UAAUC,CAAV,EAAaC,YAAb,EAA2BC,WAA3B,EAAwCC,QAAxC,EAAkDC,WAAlD,EAA+DC,gBAA/D,EAAiFC,cAAjF,EAAiG;AAChG,QAAMC,gBAAgBC,SAASC,cAAT,CAAwB,gBAAxB,CAAtB;AACA,QAAMC,UAAUF,SAASC,cAAT,CAAwB,SAAxB,CAAhB;AACA,QAAME,OAAOP,YAAYQ,OAAZ,CAAoB,SAApB,CAAb;;AAEAD,SAAKD,OAAL,CAAaV,EAAEU,OAAF,EAAWG,GAAX,EAAb;;AAEAH,YAAQI,gBAAR,CAAyB,QAAzB,EAAmC,UAACC,KAAD,EAAW;AAC1C,YAAMC,KAAKD,MAAME,MAAjB;AACAN,aAAKD,OAAL,CAAaM,GAAGE,OAAH,CAAWF,GAAGG,aAAd,EAA6BC,KAA1C;AACAb,sBAAca,KAAd,GAAsB,EAAtB;AACH,KAJD,EAIG,KAJH;;AAMAT,SAAKU,OAAL,CAAaC,SAAb,CAAuB,UAACD,OAAD,EAAa;AAChC,YAAME,UAAUvB,EAAE,yBAAF,EAA6BwB,IAA7B,CAAkC,qBAAlC,CAAhB;;AAEA,YAAMC,oBAAoB,SAApBA,iBAAoB,CAASC,KAAT,EAAgBV,EAAhB,EAAoB;AAC1C,gBAAMW,KAAKX,GAAGY,YAAH,CAAgB,IAAhB,CAAX;AACA,gBAAIvB,iBAAiBwB,GAAjB,CAAqBF,EAArB,CAAJ,EAA8B;AAC1B3B,kBAAEgB,EAAF,EAAMH,GAAN,CAAUP,eAAee,OAAf,EAAwBhB,iBAAiBwB,GAAjB,CAAqBF,EAArB,CAAxB,CAAV;AACH;AACJ,SALD;;AAOAJ,gBAAQO,IAAR,CAAaL,iBAAb;AACH,KAXD;;AAaA,QAAI,CAACxB,aAAa8B,iBAAb,EAAL,EAAuC;AACnC9B,qBAAaqB,SAAb,CAAuB,UAACU,WAAD,EAAiB;AACpC,gBAAIA,WAAJ,EAAiB;AACb,oBAAI9B,WAAJ,CAAgBK,aAAhB,EAA+BJ,QAA/B,EAAyC,SAAzC;AACH;AACJ,SAJD;AAKH,KAND,MAMO;AACH,YAAID,WAAJ,CAAgBK,aAAhB,EAA+BJ,QAA/B,EAAyC,SAAzC;AACH;AACJ,CA3CD","file":"autocomplete.js","sourcesContent":["/**\n * @author Bartosz Herba <b.herba@ctidigital.com>\n * @copyright 2017 CtiDigital\n */\ndefine([\n    'jquery',\n    'GoogleAddressLookup/model/apiLoadListener',\n    'GoogleAddressLookup/model/google/initializer',\n    'GoogleAddressLookup/model/google/strategy/default',\n    'GoogleAddressLookup/model/address/addressData',\n    'GoogleAddressLookup/model/address/addressFieldsMap',\n    'GoogleAddressLookup/model/address/valueExtractor'\n], function ($, loadListener, Initializer, Strategy, addressData, addressFieldsMap, valueExtractor) {\n    const addressFinder = document.getElementById('address_finder');\n    const country = document.getElementById('country');\n    const form = addressData.addForm('address');\n\n    form.country($(country).val());\n\n    country.addEventListener('change', (event) => {\n        const el = event.target;\n        form.country(el.options[el.selectedIndex].value);\n        addressFinder.value = '';\n    }, false);\n\n    form.address.subscribe((address) => {\n        const $inputs = $('[data-address-fieldset]').find('[data-autocomplete]');\n\n        const autocompleteField = function(index, el) {\n            const id = el.getAttribute('id');\n            if (addressFieldsMap.map[id]) {\n                $(el).val(valueExtractor(address, addressFieldsMap.map[id]));\n            }\n        };\n\n        $inputs.each(autocompleteField);\n    });\n\n    if (!loadListener.isGoogleApiLoaded()) {\n        loadListener.subscribe((isApiLoaded) => {\n            if (isApiLoaded) {\n                new Initializer(addressFinder, Strategy, 'address');\n            }\n        });\n    } else {\n        new Initializer(addressFinder, Strategy, 'address');\n    }\n});\n"]}